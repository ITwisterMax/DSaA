program Laba5;

{$APPTYPE CONSOLE}

uses
  SysUtils,
  Windows;

type
  StekElement = ^TStek;

TStek = record
  Elem : Char;
  Next : StekElement;
end;

var
  st : StekElement;
  temp : Char;
  input, output : string;
  i, Rang : Integer;

//Добавление к стеку st элемента value
Procedure AddSteck (var st : StekElement; value : Char);
var
  x : StekElement;

begin
  //Добавляемый элемент
  new(x);
  x^.Elem := value;
  //Стек строим так, что next ссылается на то, что положили раньше
  x^.next := st;
  st := x;
end;

//Забрать из стека верхний элемент
function GetStek(var st : StekElement) : Char;
begin
  if st <> nil then
  begin
    GetStek := st^.Elem;
    //Убираем элемент из стека
    st := st^.next;
  end
  else
    //Для пустого стека возвращаем символ #0
    GetStek := #0;
end;

//Получить стековый приоритет символа с
function StekPriority (c : Char) : Integer;
begin
  case c of
    '+', '-' : Result := 2;
    '*', '/' : Result := 4;
    '^' : Result := 6;
    'a'..'z', 'A'..'Z' : Result := 8;
    '(' : Result := 0;
    else
      //Для неизвестного символа возвращаем 10
      Result := 10;
  end;
end;

//Получить относительный приоритет символа с
function InpPriority (c : Char) : Integer;
begin
  case c of
    '+', '-' : Result := 1;
    '*', '/' : Result := 3;
    '^' : Result := 5;
    'a'..'z', 'A'..'Z' : Result := 7;
    '(' : Result := 9;
    ')' : Result := 0;
    else
      //Для неизвестного символа возвращаем 10
      Result := 10;
  end;
end;

//Возвращает ранг символа
function CharRang (c : Char) : Integer;
begin
  if c in ['a'..'z','A'..'Z'] then
    //Для операнда ранг 1
    Result := 1
  else
    //Для оператора ранг -1
    Result := -1;
end;

//Добавление к стеку st элемента value
function PostfixForm (var st : StekElement; var input : string; var Rang : Integer) : string;
var
  i : Integer;
  t : Char;
  output : string;

begin
  //Сделали стек пустым
  st := nil;
  //Обнуляем ранг
  Rang := 0;
  //Обнуляем выходную строку
  output := '';

  i := 1;
  while i <= Length(input) do
    //Стек пуст или приоритет входного символа больше
    if  (st = nil) or (InpPriority(Input[i]) > StekPriority(st^.Elem)) then
    begin
      if Input[i] <> ')' then
        AddSteck(st,input[i]);
      i := i + 1;
    end

    //Стек не пуст и приоритет входного символа меньше
    else
    begin
      //Забираем из стека верний символ
      t := GetStek(st);
      if t <> '(' then
      begin
        output := output + t;
        Rang := Rang + CharRang(t);
      end;
    end;

  //Дописываем всё что осталось в стеке
  while not (st = nil) do
  begin
    t := GetStek(st);
    if t <> '(' then
      begin
        output := output + t;
        Rang := Rang + CharRang(t);
      end;
  end;

  Result := output;
end;

function Reverse (var InputString : string) : string;
var
  temp : char;
  i : Integer;

begin
  //Строка справа налево
  for i := 1 to Length(InputString) div 2 do
    begin
      temp := InputString[i];
      InputString[i] := InputString[Length(InputString) - i + 1];
      InputString[Length(InputString) - i + 1] := temp;
    end;

  //Расставляем правильно скобки
  for i := 1 to Length(InputString) do
    begin
      if InputString[i] = ')' then InputString[i] := '('
        else if InputString[i] = '(' then InputString[i] := ')';
    end;

  Result := InputString;
end;

begin
  Write('Инфиксная форма: ');
  Readln(input);
  Writeln;

  //Преобразование входной строки
  i := 1;
  while i <= Length(input) do
    if input[i] = ' ' then Delete(input, i, 1)
      else inc(i);

  //Постфиксная форма
  output := PostfixForm(st, input, Rang);

  Write('Постфиксная форма: ');
  Writeln(output);
  Write('Ранг выражения: ');
  Writeln(Rang);
  Writeln;


  //Строка справа налево
  input := Reverse(input);
  //Постфиксная форма
  output := PostfixForm(st, input, Rang);
  //Строка справа налево
  output := Reverse(output);

  Write('Префиксная форма: ');
  Writeln(output);
  Write('Ранг выражения: ');
  Writeln(Rang);
  Readln;
end.
